/* Problem 1 */
/*
title: Multiples of 3 and 5
Problem: 
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
https://projecteuler.net/problem=1
answer:*/

var soFar = 0
for (var i = 0;i<1000;i++){
    if (i%3===0||i%5===0){
      soFar+=i;
    }
}
console.log(soFar)
//answer = 233168

/* Problem 2*/

/* Title: Even Fibonacci numbers
Problem:
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. 
https://projecteuler.net/problem=2
*/

var term1 = 0;
var term2 = 1;
var newTerm = term1+term2;
var sum=0;
while (newTerm<4000000){
	if(newTerm%2===0){
		sum +=newTerm;
	}
	term1= term2;
	term2= newTerm;
	newTerm= term1+term2;
}

//sum = 4613732 


/*Problem 3 */

/*
Title: Largest Prime Factor

Problem:
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
*/
//This awful brute force method works in theory, but is way too slow:
var isPrime = function(num){ // a whole helper function to check if number is prime
	for(var i = 2; i < num; i++){ 
		if (num%i===0){ 
			return false;
			break;
		}
	}
	return true;
};
var highPrimeFactor = function(num){ 
	var fact = 0
	var max = (num/2) //A factor isn't going to be more than half of the number - an okay starting point, but this should really be reduced each time, see below solution
	for(var i=1; i <max;i++){
		if((num%i===0)&&(isPrime(i))){
			fact = i;
		}
	}
	return fact;
};

//A faster formula that's still pretty dirty

var highPrimeFactor = function(n){
	var i = 2
		while(i < n){ // keep going until we overlap - this can probably be improved
			while(n%i===0){
				n /= i; //this cuts down the number of recursions we have to do, and gets us to something prime
			}
			i +=1;
		}
	console.log(n);
}
highPrimeFactor(600851475143);
//answer = 6857
   


